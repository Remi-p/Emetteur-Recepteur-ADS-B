function [registre, display_plot, display_text] = planes_on_map( registre, display_plot, display_text )
% planes_on_map Affiche les avions et leur trajectoire sur une carte 
%               google map
%   type : "Initialisation" : pr?pare la carte
%          Autre : affiche la position des avions entr? en param?tre

%% Avions
drawArrow = @(x,y) quiver( x(1),y(1),x(2)-x(1),y(2)-y(1),0 )

for ind=1:size(registre.adresse,2)
    
    for k=1:length(registre.positions{ind})

        % derniere position de l'avion
        curr_plane__pos = registre.positions{ind}{k};

        % nombre de positions enregistre pour cet avion
        nb_positions = length(registre.positions{ind});

        if registre.update(ind) == 0;
            if k == nb_positions
                if registre.head(ind) == 0;
                    display_plot{ind} = plot(curr_plane__pos(2), curr_plane__pos(1),'.c','MarkerSize',20); 
                else
                    %display_plot{ind} = quiver(curr_plane__pos(2),curr_plane__pos(1),curr_plane__pos(2)+0.1,curr_plane__pos(1)+0.1);
                    %set(display_plot{ind}, 'rotation', registre.head(ind));
%                     display_plot{ind} = text(curr_plane__pos(2),curr_plane__pos(1),'\fontsize{22}\color{blue}>', ...
%                            'horizontalalignment','center', ...
%                            'verticalalignment','bottom');
%                     set(display_plot{ind}, 'rotation', registre.head(ind))

                    display_plot{ind} = quiver(curr_plane__pos(2), curr_plane__pos(1),0.4*cosd(registre.head(ind)),0.4*sind(registre.head(ind)));
                       set(display_plot{ind}, ...
                        'LineWidth',4, ...
                        'AutoScale','off', ...
                        'AutoScaleFactor', 0.1, ...
                        'MaxHeadSize', 50, ...
                        'Color', [0 1 1]);
%                     display_plot{ind}=annotation('arrow');
%                     set(display_plot{ind},'parent', gca, ...
%                         'position', [curr_plane__pos(2) curr_plane__pos(1) (curr_plane__pos(2)+0.05*cosd(registre.head(ind))) (curr_plane__pos(1)+0.05*sind(registre.head(ind)))], ...
%                         'HeadLength', 1000, 'HeadWidth', 100, 'HeadStyle', 'hypocycloid', ...
%                         'Color', [0.4 0.1 0.8], 'LineWidth', 3);




                end
                
                display_text{ind} = text(curr_plane__pos(2)+0.1, curr_plane__pos(1),registre.adresse{ind},'color','r');
                registre.update(ind) = k;
            else % sinon
                plot(curr_plane__pos(2), curr_plane__pos(1),'.b','MarkerSize',5)
            end
        
        elseif registre.update(ind) < nb_positions
            % si c'est la derniere position
            if k == nb_positions
                
                set(display_plot{ind}, 'Visible', 'off');
                set(display_text{ind}, 'Visible', 'off');
                
                for m=length(registre.update(ind)):nb_positions
                    
                    p = registre.positions{ind}{m};
                    plot(p(2), p(1),'.b','MarkerSize',5)
                end
                 if registre.head(ind) == 0;
                    display_plot{ind} = plot(curr_plane__pos(2), curr_plane__pos(1),'.c','MarkerSize',20); 
                 else
                
                 % display_plot{ind} = quiver(curr_plane__pos(2),curr_plane__pos(1),curr_plane__pos(2)+0.1,curr_plane__pos(1)+0.1);
                 %set(display_plot{ind}, 'rotation', registre.head(ind));
%                 display_plot{ind} = text(curr_plane__pos(2),curr_plane__pos(1),'\fontsize{22}\color{blue}>', ...
%                            'horizontalalignment','center', ...
%                            'verticalalignment','bottom');
%     set(display_plot{ind}, 'rotation', registre.head(ind))
%                     display_plot{ind} = quiver(curr_plane__pos(2), curr_plane__pos(1),0.4*cosd(registre.head(ind)),0.4*sind(registre.head(ind)));
%                        set(display_plot{ind}, ...
%                         'LineWidth',4, ...
%                         'AutoScale','off', ...
%                         'AutoScaleFactor', 0.1, ...
%                         'MaxHeadSize', 50, ...
%                         'Color', [0 1 1]);
                        x = [curr_plane__pos(2) curr_plane__pos(2)+0.4*cosd(registre.head(ind))];
                        y = [curr_plane__pos(1) curr_plane__pos(1)+0.4*cosd(registre.head(ind))];
                        annotation('arrow',x,y)
%                     display_plot{ind}=annotation('arrow');
%                     set(display_plot{ind},'parent', gca, ...
%                         'position', [curr_plane__pos(2) curr_plane__pos(1) (curr_plane__pos(2)+0.05*cosd(registre.head(ind))) (curr_plane__pos(1)+0.05*sind(registre.head(ind)))], ...
%                         'HeadLength', 1000, 'HeadWidth', 100, 'HeadStyle', 'hypocycloid', ...
%                         'Color', [0.4 0.1 0.8], 'LineWidth', 3);
                 
                 
                 end
                display_text{ind} = text(curr_plane__pos(2)+0.1, curr_plane__pos(1),registre.adresse{ind},'color','r');
                registre.update(ind) = registre.update(ind)+1;
                

            else % sinon
                plot(curr_plane__pos(2), curr_plane__pos(1),'.b','MarkerSize',5)
            end
        end
    end
end

drawnow

end